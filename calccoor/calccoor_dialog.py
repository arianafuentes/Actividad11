# -*- coding: utf-8 -*-
"""
/***************************************************************************
 UTMCalcDialog
                                 A QGIS plugin
 permite realizar conversiones 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-04-16
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Ariana Fuentes
        email                : paola0845@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import math
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# GEODESICAS_UTM.py

#Variables para ambas transformaciones

#Factor de Escala
K0 = 0.9996

#Excentricidades
E = 0.00669438
E2 = E * E
E3 = E2 * E
E_P2 = E / (1 - E)

#Segundas Excentricidades
SQRT_E = math.sqrt(1 - E)
_E = (1 - SQRT_E) / (1 + SQRT_E)
_E2 = _E * _E
_E3 = _E2 * _E
_E4 = _E3 * _E
_E5 = _E4 * _E

#Ecuaciones de la conversion a UTM
M1 = (1 - E / 4 - 3 * E2 / 64 - 5 * E3 / 256)
M2 = (3 * E / 8 + 3 * E2 / 32 + 45 * E3 / 1024)
M3 = (15 * E2 / 256 + 45 * E3 / 1024)
M4 = (35 * E3 / 3072)

#Ecuaciones de la conversion a Lat Lon
P2 = (3 / 2 * _E - 27 / 32 * _E3 + 269 / 512 * _E5)
P3 = (21 / 16 * _E2 - 55 / 32 * _E4)
P4 = (151 / 96 * _E3 - 417 / 128 * _E5)
P5 = (1097 / 512 * _E4)

#Semieje del Elipsoide (WHS84)
R = 6378137

#Bandas UTM
ZONE_LETTERS = "CDEFGHJKLMNPQRSTUVWXX"
NORTH_LETTERS = "NPQRSTUVWXX"
SOUTH_LETTERS = "CDEFGHJKLM"

# ./GEODESICAS_UTM.py

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'calccoor_dialog_base.ui'))


class UTMCalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(UTMCalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.spbLatD.valueChanged.connect(self.latDMStoDD)
        self.spbLatM.valueChanged.connect(self.latDMStoDD) 
        self.spbLatS.valueChanged.connect(self.latDMStoDD) 
        self.cmbLatH.currentTextChanged.connect(self.latDMStoDD)


        #Disparadores para la longitud
        self.spbLonD.valueChanged.connect(self.lonDMStoDD)
        self.spbLonM.valueChanged.connect(self.lonDMStoDD) 
        self.spbLonS.valueChanged.connect(self.lonDMStoDD) 
        self.cmbLonH.currentTextChanged.connect(self.lonDMStoDD)

        #conector de grados decimales a DMS y decimales a UTM
        self.spbLatDD.editingFinished.connect(self.latDDtoDMS) 
        self.spbLonDD.editingFinished.connect(self.lonDDtoDMS)
        self.spbLatDD.editingFinished.connect(self.to_UTM) 
        self.spbLonDD.editingFinished.connect(self.to_UTM)

    def latDMStoDD(self): 
        iDeg = self.spbLatD.value() 
        iMin = self.spbLatM.value() 
        dSeg = self.spbLatS.value() 
        sHem = self.cmbLatH.currentText()


        dDD = float (iDeg)  + iMin/60 + dSeg/3600 

        if sHem == "S" : 
            dDD = dDD * -1  

        self.spbLatDD.setValue(dDD)   

    def lonDMStoDD(self): 
        iDeg = self.spbLonD.value() 
        iMin = self.spbLonM.value() 
        dSeg = self.spbLonS.value() 
        sHem = self.cmbLonH.currentText()


        dDD = float (iDeg)  + iMin/60 + dSeg/3600 

        if sHem == "W" : 
            dDD = dDD * -1  

        self.spbLonDD.setValue(dDD) 

    def latDDtoDMS(self):
        dDD = self.spbLatDD.value()

        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSec = (dMin - iMin) * 60

        self.spbLatD.setValue(abs(iDeg))
        self.spbLatM.setValue(abs(iMin))
        self.spbLatS.setValue(abs(dSec))

        if dDD < 0: 
            self.cmbLatH.setCurrentText ("S")
        else: 
            self.cmbLatH.setCurrentText ("N") 
        
    def lonDDtoDMS(self):
        dDD = self.spbLonDD.value()

        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSec = (dMin - iMin) * 60
        
        self.spbLonD.setValue(abs(iDeg))
        self.spbLonM.setValue(abs(iMin))
        self.spbLonS.setValue(abs(dSec))

        if dDD < 0: 
            self.cmbLonH.setCurrentText ("W")
        else: 
            self.cmbLonH.setCurrentText ("E")

    
    def to_UTM(self):
        """
        Esta funcion solicita al usuario los Inputs:
            Latitud > float. grados decimales
            Longitud > float. grados decimales
            
        Calcula:
            El numero de la Zona > int. huso
            El meridiano central de la zona > int. cenMer
            Banda de la zona > str. zona
            Coordenada X > float
            Coordenada Y > float

        Returns
        -------
        Una tupla de los valores de X, Y, Zona, Banda, Meridiano Central)
        (X, Y, huso, zona, cenMer)

        """
        phi = float(self.spbLatDD.value())
        
        phiRad = math.radians(phi)
        
        lamb = float(self.spbLonDD.value())
        
        lambRad = math.radians(lamb)
        
        #Huso
        huso = int((lamb/6) + 31)
        
        print(f"Huso = {huso}")
        
        #Meridiano central de la zona
        cenMer = 6 * (huso - 1) - 177
        print(f"Meridiano Central = {cenMer}")
        cenMer_rad = math.radians(cenMer)
        
        #Letra de Zona
        if -80 <= phi <= 84:
            zona = ZONE_LETTERS[int(phi + 80) >> 3]
        print(f"Zona = {zona}")
        cosRad= math.cos(phiRad)
        tanRad = math.tan(phiRad)
        sinRad = math.sin(phiRad)
        tanRad2 = tanRad**2
        tanRad4 = tanRad2**2
        
        #Calcula el valor de N 
        n = R / math.sqrt(1 - E * sinRad**2)
        c = E_P2 * cosRad**2
        
        #Ecuaciones de la proyecciÃ³n
        a = cosRad * (((lambRad - cenMer_rad) + math.pi) % (2 * math.pi) - math.pi)
        a2 = a * a
        a3 = a2 * a
        a4 = a3 * a
        a5 = a4 * a
        a6 = a5 * a
        
        m = R * (M1 * phiRad -
                M2 * math.sin(2 * phiRad) +
                M3 * math.sin(4 * phiRad) -
                M4 * math.sin(6 * phiRad))

        X = K0 * n * (a +
                    a3 / 6 * (1 - tanRad2 + c) +
                    a5 / 120 * (5 - 18 * tanRad2 + tanRad4 + 72 * c - 58 * E_P2)) + 500000

        y = K0 * (m + n * tanRad * (a2 / 2 +
                a4 / 24 * (5 - tanRad2 + 9 * c + 4 * c**2) +
                a6 / 720 * (61 - 58 * tanRad2 + tanRad4 + 600 * c - 330 * E_P2)))

        if phi >= 0:
            Y = y
        else:
            Y = 10000000 + y

        print(f"X = {round(X,3)}")
        print(f"Y = {round(Y,3)}") 
        
        #Seteando los valores de los inputs

        self.spbUtmX.setValue(X)
        self.spbUtmY.setValue(Y)
        self.spbUtmZ.setValue(huso)
        self.spbUtmM.setValue(cenMer)
        self.cmbUtmB.setCurrentText(zona)




